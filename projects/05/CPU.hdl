// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
      Not(in=instruction[15..15], out=isAInstr);
      And(a=instruction[15..15], b=instruction[15..15], out=isCInstr);
      Mux16(a=aluOut, b=instruction, sel=isAInstr, out=muxOut);
      And(a=isCInstr, b=instruction[5..5], out=isCInstrAndDestA); // C-instr and dest=A
      Or(a=isCInstrAndDestA, b=isAInstr, out=aControlBit); // either (C-instr and dest=A) or A-instr
      ARegister(in=muxOut, load=aControlBit, out=aRegisterOut, out[0..14]=addressM);
      And(a=isCInstr, b=instruction[4..4], out=isCInstrAndDestD); // C-instr and dest=D
      DRegister(in=aluOut, load=isCInstrAndDestD, out=dRegisterOut);
      Mux16(a=aRegisterOut, b=inM, sel=instruction[12..12], out=aRegisterOrMemory); // check 'a' bit to decide between A or M
      ALU(x=dRegisterOut, y=aRegisterOrMemory, zx=instruction[11..11], nx=instruction[10..10], zy=instruction[9..9], ny=instruction[8..8], f=instruction[7..7], no=instruction[6..6], out=aluOut, out=outM, zr=isZero, ng=isNeg);
      And(a=isCInstr, b=instruction[3..3], out=writeM); // assert writeM if C-instr and dest=M
      
      // this logic computes whether to Jump or Inc on the Program Counter
      Or(a=isZero, b=isNeg, out=isZeroOrNeg);
      Not(in=isZeroOrNeg, out=isPos);
      And(a=instruction[2], b=isNeg, out=j1);
      And(a=instruction[1], b=isZero, out=j2);
      Or(a=j1, b=j2, out=j3);
      And(a=instruction[0], b=isPos, out=j4);
      Or(a=j3, b=j4, out=j5);
      And(a=j5, b=isCInstr, out=isLoad);
      Not(in=isLoad, out=isInc);
      
      PC(in=aRegisterOut, load=isLoad, inc=isInc, reset=reset, out[0..14]=pc);
}
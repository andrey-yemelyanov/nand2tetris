Token=> class
Token=> SquareGame
Token=> {
Token=> field
Token=> Square
Token=> square
Token=> ;
Token=> field
Token=> int
Token=> direction
Token=> ;
Token=> constructor
Token=> SquareGame
Token=> new
Token=> (
Token=> )
Token=> {
Token=> let
Token=> square
Token=> =
Token=> square
Token=> ;
Token=> let
Token=> direction
Token=> =
Token=> direction
Token=> ;
Token=> return
Token=> square
Token=> ;
Token=> }
Token=> method
Token=> void
Token=> dispose
Token=> (
Token=> )
Token=> {
Token=> do
Token=> square
Token=> .
Token=> dispose
Token=> (
Token=> )
Token=> ;
Token=> do
Token=> Memory
Token=> .
Token=> deAlloc
Token=> (
Token=> square
Token=> )
Token=> ;
Token=> return
Token=> ;
Token=> }
Token=> method
Token=> void
Token=> moveSquare
Token=> (
Token=> )
Token=> {
Token=> if
Token=> (
Token=> direction
Token=> )
Token=> {
Token=> do
Token=> square
Token=> .
Token=> moveUp
Token=> (
Token=> )
Token=> ;
Token=> }
Token=> if
Token=> (
Token=> direction
Token=> )
Token=> {
Token=> do
Token=> square
Token=> .
Token=> moveDown
Token=> (
Token=> )
Token=> ;
Token=> }
Token=> if
Token=> (
Token=> direction
Token=> )
Token=> {
Token=> do
Token=> square
Token=> .
Token=> moveLeft
Token=> (
Token=> )
Token=> ;
Token=> }
Token=> if
Token=> (
Token=> direction
Token=> )
Token=> {
Token=> do
Token=> square
Token=> .
Token=> moveRight
Token=> (
Token=> )
Token=> ;
Token=> }
Token=> do
Token=> Sys
Token=> .
Token=> wait
Token=> (
Token=> direction
Token=> )
Token=> ;
Token=> return
Token=> ;
Token=> }
Token=> method
Token=> void
Token=> run
Token=> (
Token=> )
Token=> {
Token=> var
Token=> char
Token=> key
Token=> ;
Token=> var
Token=> boolean
Token=> exit
Token=> ;
Token=> let
Token=> exit
Token=> =
Token=> key
Token=> ;
Token=> while
Token=> (
Token=> exit
Token=> )
Token=> {
Token=> while
Token=> (
Token=> key
Token=> )
Token=> {
Token=> let
Token=> key
Token=> =
Token=> key
Token=> ;
Token=> do
Token=> moveSquare
Token=> (
Token=> )
Token=> ;
Token=> }
Token=> if
Token=> (
Token=> key
Token=> )
Token=> {
Token=> let
Token=> exit
Token=> =
Token=> exit
Token=> ;
Token=> }
Token=> if
Token=> (
Token=> key
Token=> )
Token=> {
Token=> do
Token=> square
Token=> .
Token=> decSize
Token=> (
Token=> )
Token=> ;
Token=> }
Token=> if
Token=> (
Token=> key
Token=> )
Token=> {
Token=> do
Token=> square
Token=> .
Token=> incSize
Token=> (
Token=> )
Token=> ;
Token=> }
Token=> if
Token=> (
Token=> key
Token=> )
Token=> {
Token=> let
Token=> direction
Token=> =
Token=> exit
Token=> ;
Token=> }
Token=> if
Token=> (
Token=> key
Token=> )
Token=> {
Token=> let
Token=> direction
Token=> =
Token=> key
Token=> ;
Token=> }
Token=> if
Token=> (
Token=> key
Token=> )
Token=> {
Token=> let
Token=> direction
Token=> =
Token=> square
Token=> ;
Token=> }
Token=> if
Token=> (
Token=> key
Token=> )
Token=> {
Token=> let
Token=> direction
Token=> =
Token=> direction
Token=> ;
Token=> }
Token=> while
Token=> (
Token=> key
Token=> )
Token=> {
Token=> let
Token=> key
Token=> =
Token=> key
Token=> ;
Token=> do
Token=> moveSquare
Token=> (
Token=> )
Token=> ;
Token=> }
Token=> }
Token=> return
Token=> ;
Token=> }
Token=> }

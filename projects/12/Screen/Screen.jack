// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {

    static Array mask;
    static Array leftMask;
    static Array rightMask;
    static boolean currentColor;
    static boolean BLACK;
    static boolean WHITE;
    static int screen;

    /** Initializes the Screen. */
    function void init() {
        var int i;
        let mask = Array.new(16);
        let mask[0] = 1;
        let i = 1;
        while(i < 16){
            let mask[i] = mask[i - 1] + mask[i - 1];
            let i = i + 1;
        }

        let rightMask = Array.new(16);
        let rightMask[0] = 1;           // 0000 0000 0000 0001
        let rightMask[1] = 3;           // 0000 0000 0000 0011
        let rightMask[2] = 7;           // 0000 0000 0000 0111
        let rightMask[3] = 15;          // 0000 0000 0000 1111
        let rightMask[4] = 31;          // 0000 0000 0001 1111
        let rightMask[5] = 63;          // 0000 0000 0011 1111
        let rightMask[6] = 127;         // 0000 0000 0111 1111
        let rightMask[7] = 255;         // 0000 0000 1111 1111
        let rightMask[8] = 511;         // 0000 0001 1111 1111
        let rightMask[9] = 1023;        // 0000 0011 1111 1111
        let rightMask[10] = 2047;       // 0000 0111 1111 1111
        let rightMask[11] = 4095;       // 0000 1111 1111 1111
        let rightMask[12] = 8191;       // 0001 1111 1111 1111
        let rightMask[13] = 16383;      // 0011 1111 1111 1111
        let rightMask[14] = 32767;      // 0111 1111 1111 1111
        let rightMask[15] = -1;         // 1111 1111 1111 1111

        let leftMask = Array.new(16);
        let leftMask[0] = -(32767 + 1); // 1000 0000 0000 0000
        let leftMask[1] = -16384;       // 1100 0000 0000 0000
        let leftMask[2] = -8192;        // 1110 0000 0000 0000
        let leftMask[3] = -4096;        // 1111 0000 0000 0000
        let leftMask[4] = -2048;        // 1111 1000 0000 0000
        let leftMask[5] = -1024;        // 1111 1100 0000 0000
        let leftMask[6] = -512;         // 1111 1110 0000 0000
        let leftMask[7] = -256;         // 1111 1111 0000 0000
        let leftMask[8] = -128;         // 1111 1111 1000 0000
        let leftMask[9] = -64;          // 1111 1111 1100 0000
        let leftMask[10] = -32;         // 1111 1111 1110 0000
        let leftMask[11] = -16;         // 1111 1111 1111 0000
        let leftMask[12] = -8;          // 1111 1111 1111 1000
        let leftMask[13] = -4;          // 1111 1111 1111 1100
        let leftMask[14] = -2;          // 1111 1111 1111 1110
        let leftMask[15] = -1;          // 1111 1111 1111 1111
        
        let screen = 16384;
        let BLACK = true;
        let WHITE =  false;
        do Screen.setColor(BLACK);
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int screenMemorySize, i;
        let screenMemorySize = 8 * 1024; // 8K graphics memory
        while(i < screenMemorySize){
            let screen[i] = 0; 
            let i = i + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let currentColor = b;
        return;
    }

    function int mod(int a, int b){
        return a - ((a / b) * b);
    }

    function int getWordAddress(int x, int y){
        return (32 * y) + (x / 16);
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int value, mod, address;
        let address = Screen.getWordAddress(x, y);
        let value = screen[address];
        let mod = Screen.mod(x, 16);
        if(currentColor = BLACK){
            let value = value | mask[mod];
        }else{
            let value = value & (~mask[mod]);
        }
        let screen[address] = value;
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        if(x1 = x2){
            do Screen.drawVerticalLine(y1, y2, x1);
        }else{
            if(y1 = y2){
                do Screen.drawHorizontalLine(x1, x2, y1);
            }else{
                if(Screen.isAscendingLine(x1, y1, x2, y2)){
                    do Screen.drawAscendingLine(x1, y1, x2, y2);
                }else{
                    if(Screen.isDescendingLine(x1, y1, x2, y2)){
                        do Screen.drawDescendingLine(x1, y1, x2, y2);
                    }
                }
            }
        }
        return;
    }

    function boolean isAscendingLine(int x1, int y1, int x2, int y2){
        if(y1 < y2){
            return x1 > x2;
        }else{
            return x2 > x1;
        }
    }

    function boolean isDescendingLine(int x1, int y1, int x2, int y2){
        if(y1 < y2){
            return x2 > x1;
        }else{
            return x1 > x2;
        }
    }

    function void drawDescendingLine(int x1, int y1, int x2, int y2){
        var int dx, dy, a, b, diff, x, y;
        let dx = Math.abs(x2 - x1); let dy = Math.abs(y2 - y1);
        let a = 0; let b = 0; let diff = 0;
        if(y1 < y2){
            let y = y1; let x = x1;
        }else{
            let y = y2; let x = x2;
        }
        while(((a < dx) | (a = dx)) & ((b < dy) | (b = dy))){
            do Screen.drawPixel(x + a, y + b);
            if(diff < 0){
                let a = a + 1;
                let diff = diff + dy;
            }else{
                let b = b + 1;
                let diff = diff - dx;
            }
        }
        return;
    }

    function void drawAscendingLine(int x1, int y1, int x2, int y2){
        var int dx, dy, a, b, diff, x, y;
        let dx = Math.abs(x2 - x1); let dy = Math.abs(y2 - y1);
        let a = 0; let b = 0; let diff = 0;
        if(y1 > y2){
            let y = y1; let x = x1;
        }else{
            let y = y2; let x = x2;
        }
        while(((a < dx) | (a = dx)) & ((b < dy) | (b = dy))){
            do Screen.drawPixel(x + a, y - b);
            if(diff < 0){
                let a = a + 1;
                let diff = diff + dy;
            }else{
                let b = b + 1;
                let diff = diff - dx;
            }
        }
        return;
    }

    function void drawHorizontalLine(int x1, int x2, int y){
        var int fromAddress, toAddress, max, min;
        let max = Math.max(x1, x2); let min = Math.min(x1, x2);
        let x1 = min; let x2 = max;
        let fromAddress = Screen.getWordAddress(x1, y);
        let toAddress = Screen.getWordAddress(x2, y);
        do Screen.drawHorizontalLineEfficient(Screen.mod(x1, 16), Screen.mod(x2, 16), fromAddress, toAddress, 1);
        return;
    }

    function void drawHorizontalLineEfficient(int x1Mod16, int x2Mod16, int fromAddress, int toAddress, int nLines){
        while(nLines > 0){
            if(fromAddress = toAddress){
                if(currentColor = BLACK){
                    let screen[fromAddress] = screen[fromAddress] | (leftMask[15 - x1Mod16] & rightMask[x2Mod16]);
                }else{
                    let screen[fromAddress] = screen[fromAddress] & (~(leftMask[15 - x1Mod16] & rightMask[x2Mod16]));
                }
            }else{
                if(currentColor = BLACK){
                    let screen[fromAddress] = screen[fromAddress] | leftMask[15 - x1Mod16];
                    let fromAddress = fromAddress + 1;
                    while(fromAddress < toAddress){
                        let screen[fromAddress] = -1;
                        let fromAddress = fromAddress + 1;
                    }
                    let screen[fromAddress] = screen[fromAddress] | rightMask[x2Mod16];
                }else{
                    let screen[fromAddress] = screen[fromAddress] & (~leftMask[15 - x1Mod16]);
                    let fromAddress = fromAddress + 1;
                    while(fromAddress < toAddress){
                        let screen[fromAddress] = 0;
                        let fromAddress = fromAddress + 1;
                    }
                    let screen[fromAddress] = screen[fromAddress] & (~rightMask[x2Mod16]);
                }
            }
            
            let fromAddress = fromAddress + 32;
            let toAddress = toAddress + 32;
            let nLines = nLines - 1;
        }
        
        return;
    }

    function void drawVerticalLine(int y1, int y2, int x){
        var int fromY, toY;
        let fromY = Math.min(y1, y2);
        let toY = Math.max(y1, y2);
        while((fromY < toY) | (fromY = toY)){
            do Screen.drawPixel(x, fromY);
            let fromY = fromY + 1;
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int lineLen, nLines, x, y, fromAddress, toAddress;
        let lineLen = Math.abs(x1 - x2);
        let nLines = Math.abs(y1 - y2);
        let x = Math.min(x1, x2);
        let y = Math.min(y1, y2);

        let fromAddress = Screen.getWordAddress(x, y);
        let toAddress = Screen.getWordAddress(x + lineLen, y);

        do Screen.drawHorizontalLineEfficient(Screen.mod(x, 16), Screen.mod(x + lineLen, 16), fromAddress, toAddress, nLines);

        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy, sqrt;
        let dy = -r;
        if((r < 181) | (r = 181)){
            while((dy < r) | (dy = r)){
                let sqrt = Math.sqrt((r * r) - (dy * dy));
                do Screen.drawHorizontalLine(x - sqrt, x + sqrt, y + dy);
                let dy = dy + 1;
            }
        }
        return;
    }
}

// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

    static Array ram;
    static Array heap;
    static int headerSize;

    /** Initializes the class. */
    function void init() {
        let headerSize = 2;
        let ram = 0;
        let heap = 2048; // heapBase
        let heap[0] = null; // next available segment - none
        let heap[1] = 14334; // segment length = size of the entire heap
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int segment, blockSize, blockAddr;
        let segment = heap;
        let blockSize = size + headerSize;
        
        while((~(segment = null)) & (segment[1] < blockSize)){
            let segment = segment[0];
        }

        if(segment = null){
            return null; // no free memory available to satisfy the request
        }

        let blockAddr = segment + segment[1] + headerSize - blockSize;
        let segment[1] = segment[1] - blockSize;
        let blockAddr[0] = null;
        let blockAddr[1] = size;
        return blockAddr + headerSize;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var int segment, recycledSegment;
        let recycledSegment = o - headerSize;
        // append the recycled segment to the end of the free list
        let segment = heap;
        while(~(segment[0] = null)){
            let segment = segment[0];
        }
        let segment[0] = recycledSegment;
        return;
    }    
}

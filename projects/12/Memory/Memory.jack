// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

    static Array ram;
    static Array heap;
    static int freeList;
    static int headerSize;

    /** Initializes the class. */
    function void init() {
        let headerSize = 2;
        let ram = 0;
        let heap = 2048; // heapBase
        let freeList = heap;
        let heap[0] = null; // next available segment - none
        let heap[1] = 14335; // segment length = size of the entire heap
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int segment, blockSize, block;
        let segment = freeList;
        let blockSize = size + headerSize;
        while((~(segment = null)) & (Memory.getLen(segment) < blockSize)){
            let segment = Memory.getNextSegment(segment);
        }
        if(segment = null){
            return null; // no free memory available to satisfy the request
        }
        do Memory.setLen(segment, Memory.getLen(segment) - blockSize);
        let block = segment + Memory.getLen(segment) + headerSize - blockSize;
        do Memory.setNextSegment(block, null);
        do Memory.setLen(block, size);
        return block + headerSize;
    }

    function int getNextSegment(int segment){
        return heap[segment - heap];
    }

    function void setNextSegment(int segment, int nextSegment){
        let heap[segment - heap] = nextSegment;
        return;
    }

    function int getLen(int segment){
        return heap[segment + 1 - heap];
    }

    function void setLen(int segment, int len){
        let heap[segment + 1 - heap] = len;
        return;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var int segment, recycledSegment;
        let recycledSegment = o - headerSize;
        // append the recycled segment to the end of the free list
        let segment = freeList;
        while(~(Memory.getNextSegment(segment) = null)){
            let segment = Memory.getNextSegment(segment);
        }
        do Memory.setNextSegment(segment, recycledSegment);
        return;
    }    
}

// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {

    static Array mask;
    static boolean currentColor;
    static boolean BLACK;
    static boolean WHITE;
    static int screenBaseAddress;

    /** Initializes the Screen. */
    function void init() {
        var int i;
        let mask = Array.new(16);
        let mask[0] = 1;
        let i = 1;
        while(i < 16){
            let mask[i] = mask[i - 1] + mask[i - 1];
            let i = i + 1;
        }
        
        let screenBaseAddress = 16384;
        let BLACK = true;
        let WHITE =  false;
        do Screen.setColor(BLACK);
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let currentColor = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, value, div, mod16;
        let div = x / 16;
        let mod16 = x - (div * 16);
        let address = screenBaseAddress + (32 * y) + div;
        let value = Memory.peek(address);
        if(currentColor = BLACK){
            let value = value | mask[mod16];
        }else{
            let value = value & (~mask[mod16]);
        }
        do Memory.poke(address, value);
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        if(x1 = x2){
            do Screen.drawVerticalLine(y1, y2, x1);
        }else{
            if(y1 = y2){
                do Screen.drawHorizontalLine(x1, x2, y1);
            }else{

            }
        }
        return;
    }

    function void drawHorizontalLine(int x1, int x2, int y){
        var int fromX, toX;
        let fromX = Math.min(x1, x2);
        let toX = Math.max(x1, x2);
        while((fromX < toX) | (fromX = toX)){
            do Screen.drawPixel(fromX, y);
            let fromX = fromX + 1;
        }
        return;
    }

    function void drawVerticalLine(int y1, int y2, int x){
        var int fromY, toY;
        let fromY = Math.min(y1, y2);
        let toY = Math.max(y1, y2);
        while((fromY < toY) | (fromY = toY)){
            do Screen.drawPixel(x, fromY);
            let fromY = fromY + 1;
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int lineLen, nLines, x, y;
        let lineLen = Math.abs(x1 - x2);
        let nLines = Math.abs(y1 - y2);
        let x = Math.min(x1, x2);
        let y = Math.min(y1, y2);
        while(nLines > 0){
            do Screen.drawHorizontalLine(x, x + lineLen, y);
            let y = y + 1;
            let nLines = nLines - 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        return;
    }
}

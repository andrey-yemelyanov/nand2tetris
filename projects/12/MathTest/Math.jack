// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    static Array mask;

    /** Initializes the library. */
    function void init() {
        var int i;

        let mask = Array.new(16);
        let mask[0] = 1;
        let i = 1;
        while(i < 16){
            let mask[i] = mask[i - 1] + mask[i - 1];
            let i = i + 1;
        }
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if((x = 0) | (x > 0)){
            return x;
        }
        return -x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int product, shiftedX, i;
        let product = 0; let shiftedX = x; let i = 0;
        while(i < 16){
            if(Math.bitSet(y, i)){
                let product = product + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX; // simulates shiftedX<<1
            let i = i + 1;
        }
        return product;
    }

    /**
    * Returns true if i-th bit is set in integer x.
    */
    function boolean bitSet(int x, int i){
        return ~((mask[i] & x) = 0);
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the division operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int quotient, powerOfTwo, i;
        var boolean isNegative, xNeg, yNeg;
        let xNeg = (x < 0); let yNeg = (y < 0);
        let isNegative = (xNeg | yNeg) & (~(xNeg & yNeg));
        let x = Math.abs(x); let y = Math.abs(y);
        
        let quotient = 0;
        while((x > y) | (x = y)){
            let powerOfTwo = 0;
            let i = 0;
            while(((mask[i] * y) < x) | ((mask[i] * y) = x)){
                let powerOfTwo = mask[i];
                let i = i + 1;
            }
            let x = x - (powerOfTwo * y);
            let quotient = quotient + powerOfTwo;
        }

        if(isNegative){
            let quotient = -quotient;
        }
        return quotient;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int start, end, ans, midSquared, mid;

        if((x = 0) | (x = 1)){
            return x;
        }

        let start = 1; let end = x; let ans = 0;
        while((start < end) | (start = end)){
            let mid = start + ((end - start) / 2);
            if(mid > 181){ // handle potential overflow
                let end = mid - 1;
            }
            else{
                let midSquared = mid * mid;
                if(midSquared = x){
                    return mid;
                }
            
                if(midSquared < x){
                    let start = mid + 1;
                    let ans = mid;
                }else{
                    let end = mid - 1;
                }
            }
        }
        return ans;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if(a > b){
            return a;
        }
        return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if(a < b){
            return a;
        }
        return b;
    }
}

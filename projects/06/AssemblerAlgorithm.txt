Assembler algorithm

1. Remove all white space and comments. Read from .asm file and write to intermediate file (if1).

2. Create intermediate file 2 (if2). Scan if1 and maintain current command counter. If an instruction is found, output it to if2 and increment current_command_counter. If a label declaration is found (LABELNAME), do not output it to if2. Add to symbol table LABELNAME=current_command_counter+1.

3. Discard if1. Scan if2. Create if3. If @SYMBOL is found, check if it is present as a label in symbol table. If yes, replace it with label's memory address. Output to if3.

4. Discard if2. Scan if3. Create if4. If @VAR is found, check if it is already present in symbol table. If @VAR is found in symbol table, replace @VAR with @ADDRESS and output to if4. If @VAR not present in symbol table, assign a new address to it and add it to ST. Replace @VAR with @ADDRESS and output to if4.

5. Discard if3. Translate resulting program in if4 to machine code. Discard if4.